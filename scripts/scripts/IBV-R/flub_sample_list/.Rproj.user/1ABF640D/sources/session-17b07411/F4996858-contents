---
title: "IBV"
output: html_document
date: "2023-03-01"
---

``````{r setup, include=FALSE} 
knitr::opts_chunk$set(warning = FALSE, message = FALSE) 
```



```{r Load in the required libraries for cleaning the dataset}
library(Biostrings)
library(dplyr)
library(tidyr)
library(phylotools)
library(readxl)
```

```{r Read in fasta file dataset from GISAID}
vic_gisaid_data <- readDNAStringSet("~/Desktop/Msc/data/gisaid/victoria_complete.fa")
yam_gisaid_data <- readDNAStringSet("~/Desktop/Msc/data/gisaid/yamagata_complete.fa")
```



```{r convert the datasets to dataframes}
#Create a dataframe containing the sequences

vic_gisaid_df <- as.data.frame(vic_gisaid_data)
yam_gisaid_df <- as.data.frame(yam_gisaid_data)

#Extract the names of sequences and generate a dataframe
vic_gisaid_names <- names(vic_gisaid_data)
vic_gisaid_names_df <- as.data.frame(vic_gisaid_names)

yam_gisaid_names <- names(yam_gisaid_data)
yam_gisaid_names_df <- as.data.frame(yam_gisaid_names)

#Bind the two dataframes together

vic_gisaid <- cbind(vic_gisaid_names_df,vic_gisaid_df)
colnames(vic_gisaid) <- c('gisaid_names','sequences')

yam_gisaid <- cbind(yam_gisaid_names_df,yam_gisaid_df)
colnames(yam_gisaid) <- c('gisaid_names','sequences')
```



```{r Remove duplicated entries}
vic_gisaid <- vic_gisaid %>% distinct(gisaid_names, .keep_all = TRUE) 
yam_gisaid <- yam_gisaid %>% distinct(gisaid_names, .keep_all = TRUE) 
```

```{r Split the gisaid_names column}
vic_gisaid <- vic_gisaid %>% separate(gisaid_names, c('isolate_name','isolate_id', 'lineage', 'segment','collection_date'), sep = '\\|')
yam_gisaid <- yam_gisaid %>% separate(gisaid_names, c('isolate_name','isolate_id','lineage','segment','collection_date'), sep = '\\|')

```

```{r Read the metadata}
#Read in the metadata
vic_gisaid_metadata <- read_xls('~/Desktop/Msc/data/gisaid/victoria_metadata.xls')
yam_gisaid_metadata <- read_xls('~/Desktop/Msc/data/gisaid/yamagata_metadata.xls')

#subset the location column to obtain country 
vic_gisaid_metadata <- vic_gisaid_metadata %>% separate(Location, c('continent', 'country'), sep = '/')
yam_gisaid_metadata <- yam_gisaid_metadata %>% separate(Location, c('continent', 'country'), sep = '/')

#join the country and continent columns to the gisaid dataframe by isolate id column
colnames(vic_gisaid_metadata) <- gsub('Isolate_Id', 'isolate_id', colnames(vic_gisaid_metadata))
colnames(yam_gisaid_metadata) <- gsub('Isolate_Id', 'isolate_id', colnames(yam_gisaid_metadata))

vic_gisaid <- vic_gisaid %>% left_join(vic_gisaid_metadata %>% select('isolate_id', 'continent', 'country'), by='isolate_id')
yam_gisaid <- yam_gisaid %>% left_join(yam_gisaid_metadata %>% select('isolate_id', 'continent', 'country'), by='isolate_id')

```

```{r Clean the data}
# Remove rows missing collection dates
vic_gisaid <- vic_gisaid %>% drop_na(collection_date)
yam_gisaid <- yam_gisaid %>% drop_na(collection_date)


#Run this only for phylogeography analysis
#vic_gisaid_phylogeo <- subset(vic_gisaid, year >=2010) 
#yam_gisaid_phylogeo <- subset(yam_gisaid, year >=2010)

#Remove influenza A sequences

vic_gisaid <- vic_gisaid %>%
          filter(grepl('^B', isolate_name))
yam_gisaid <- yam_gisaid %>%
          filter(grepl('^B', isolate_name))


#Convert the collection date column into date format
vic_gisaid$collection_date <- as.Date(vic_gisaid$collection_date)
yam_gisaid$collection_date <- as.Date(yam_gisaid$collection_date)

#Check if each sample has 8 segments

vic_gisaid_complete <- vic_gisaid %>% group_by(isolate_name, isolate_id) %>%
                summarise(count= n())

yam_gisaid_complete <- yam_gisaid %>% group_by(isolate_name, isolate_id) %>%
                summarise(count= n())



```



```{r}

# Separate the collection date column 
#vic_gisaid <- vic_gisaid %>% separate(collection_date, c("year", "month", "date"), sep = "-")
#yam_gisaid <- yam_gisaid %>% separate(collection_date, c("year", "month", "date"), sep = "-")

#Subsample the vic dataset

subsample <- function (subsample_continent, subsample_year, subsample_month) {
  gisaid1 <- filter(vic_gisaid, segment == "HA" & as.numeric(year) == subsample_year & continent == subsample_continent & as.numeric(month) == subsample_month)
  num_rows <- nrow(gisaid1)
  num_samples <- min(num_rows, 10)
  
  if (num_samples > 0) {
    data_subsample <- sample(gisaid1$isolate_id, num_samples)
    dataset_subsampled <- vic_gisaid[vic_gisaid$isolate_id %in% data_subsample, ]
    return(dataset_subsampled)
  } else {
    return(NULL)  # Return NULL if there are no samples to subsample
  }
}

continents <- c("Africa ", "Europe ", "Asia ", "Oceania ", "South America ", "North America ")
years <- c(1987:2023)
months <- c(01, 02, 03, 04, 05, 06, 07, 08, 09, 10, 11, 12)

writeFasta <- function(data, filename) {
  fastaLines <- c()
  for (rowNum in 1:nrow(data)) {
    fastaLines <- c(fastaLines, as.character(paste(">", data[rowNum, "header"], sep = "")))
    fastaLines <- c(fastaLines, as.character(data[rowNum, "sequences"]))
  }
  fileConn <- file(filename)
  writeLines(fastaLines, fileConn)
  close(fileConn)
}

# Assuming vic_gisaid dataset is loaded or generated correctly

for (continent in continents) {
  for (year in years) {
    for (month in months) {
      # Call your subsample function with the current continent and year
      subsample_data <- subsample(continent, year, month)
      
      if (!is.null(subsample_data)) {
        subsample_data <- unite(subsample_data, collection_date, c(year, month, date), sep = "-")
        subsample_data <- unite(subsample_data, header, c(isolate_name, isolate_id, country, lineage, segment, collection_date), sep = '|')
        
        file_name <- paste0("~/Desktop/Msc/data/gisaid/vic_totalsubsamp/", continent, "_", year, month, ".fasta")
        writeFasta(subsample_data, file_name)
      }
    }
  }
}

```



```{r clean the subsampled data}

vic_subsampled <- readDNAStringSet("~/Desktop/Msc/data/gisaid/vic_totalsubsamp/vic_totalsubsamp.fa")
yam_subsampled <- readDNAStringSet("~/Desktop/Msc/data/gisaid/yam_totalsubsamp/yam_totalsubsamp.fa")

#Create a dataframe containing the sequences

vic_subsampled_df <- as.data.frame(vic_subsampled)
yam_subsampled_df <- as.data.frame(yam_subsampled)

#Extract the names of sequences and generate a dataframe
vic_subsampled_names <- names(vic_subsampled)
vic_subsampled_names_df <- as.data.frame(vic_subsampled_names)

yam_subsampled_names <- names(yam_subsampled)
yam_subsampled_names_df <- as.data.frame(yam_subsampled_names)

#Bind the two dataframes together

vic_subsample <- cbind(vic_subsampled_names_df,vic_subsampled_df)
colnames(vic_subsample) <- c('gisaid_names','sequences')

yam_subsample <- cbind(yam_subsampled_names_df,yam_subsampled_df)
colnames(yam_subsample) <- c('gisaid_names','sequences')


#Split the gisaid_names column

vic_subsample <- vic_subsample %>% separate(gisaid_names, c('isolate_name','isolate_id', 'country', 'lineage', 'segment','collection_date'), sep = '\\|')

HA_vicsubsampled <- subset(vic_subsample, segment == "HA")
NA_vicsubsampled <- subset(vic_subsample, segment == "NA")
PB2_vicsubsampled <- subset(vic_subsample, segment == "PA")
PB2_vicsubsampled <- subset(vic_subsample, segment == "PB1")
PB2_vicsubsampled <- subset(vic_subsample, segment == "PB2")
NP_vicsubsampled <- subset(vic_subsample, segment == "NP")
MP_vicsubsampled <- subset(vic_subsample, segment == "MP")
NS_vicsubsampled <- subset(vic_subsample, segment == "NS")

yam_subsample <- yam_subsample %>% separate(gisaid_names, c('isolate_name','isolate_id', 'country', 'lineage', 'segment','collection_date'), sep = '\\|')

HA_yamsubsampled <- subset(yam_subsample, segment == "HA")
NA_yamsubsampled <- subset(yam_subsample, segment == "NA")
PA_yamsubsampled <- subset(yam_subsample, segment == "PA")
PB1_yamsubsampled <- subset(yam_subsample, segment == "PB1")
PB2_yamsubsampled <- subset(yam_subsample, segment == "PB2")
NP_yamsubsampled <- subset(yam_subsample, segment == "NP")
MP_yamsubsampled <- subset(yam_subsample, segment == "MP")
NS_yamsubsampled <- subset(yam_subsample, segment == "NS")



writeFasta <- function(data, filename) {
  fastaLines <- c()
  for (rowNum in 1:nrow(data)) {
    fastaLines <- c(fastaLines, as.character(paste(">", data[rowNum, "header"], sep = "")))
    fastaLines <- c(fastaLines, as.character(data[rowNum, "sequences"]))
  }
  fileConn <- file(filename)
  writeLines(fastaLines, fileConn)
  close(fileConn)
}

NA_vicsubsampled <- unite(NA_vicsubsampled, header, c(isolate_name,country,segment, collection_date), sep = '|')
writeFasta(NA_vicsubsampled, "~/Desktop/Msc/data/gisaid/vic_totalsubsamp/NA_victotalsubsamp.fa")


#yam_subsample <- yam_subsample %>% separate(gisaid_names, c('isolate_name','isolate_id','lineage','segment','collection_date'), sep = '\\|')

```

```{r}
NS_renamed <- readDNAStringSet("~/Desktop/Msc/flub_results/renamed_yam/NS_renamed.fa")
NS_renamed_df <- as.data.frame(NS_renamed)

NS_renamed_names <- names(NS_renamed)
NS_renamed_names_df <- as.data.frame(NS_renamed_names)

NS_rename <- cbind(NS_renamed_names_df,NS_renamed_df)
colnames(NS_rename) <- c('header','sequences')

NS_rename_new <- NS_rename %>% filter(grepl("B/", header))  
NS_rename_new <- NS_rename_new %>% separate(header, c('isolate_name','collection_date', 'lineage', 'segment', 'clade'), sep = '\\|')
NS_rename_new <- NS_rename_new %>% unite(header, c(isolate_name, lineage, segment,clade, collection_date), sep = '|')
NS_samples <- NS_rename %>% filter(!grepl("B/", header))
NS_renamed <- bind_rows(NS_rename_new, NS_samples)

writeFasta <- function(data, filename) {
  fastaLines <- c()
  for (rowNum in 1:nrow(data)) {
    fastaLines <- c(fastaLines, as.character(paste(">", data[rowNum, "header"], sep = "")))
    fastaLines <- c(fastaLines, as.character(data[rowNum, "sequences"]))
  }
  fileConn <- file(filename)
  writeLines(fastaLines, fileConn)
  close(fileConn)
}

writeFasta(NS_renamed, "~/Desktop/Msc/flub_results/renamed_yam/NS_renamed.fa")

```


```{r remove duplicates and ambigous characters for running iqtree}
NS_yamaln <- readDNAStringSet("~/Desktop/Msc/flub_results/aligned_total/yam/NS_yamtotaledt.fa")
NS_yamaln_df <- as.data.frame(NS_yamaln)


NS_yamaln_names <- names(NS_yamaln)
NS_yamaln_names_df <- as.data.frame(NS_yamaln_names)

NS_yamalnd <- cbind(NS_yamaln_names_df,NS_yamaln_df)
colnames(NS_yamalnd) <- c('header','sequences')

NS_yamalnd <- NS_yamalnd %>% distinct(header, .keep_all = TRUE)
NS_yamalnd$header <- gsub(" ", "_", NS_yamalnd$header)
NS_vicalnd$header <- gsub("", "_", NS_yamalnd$header)

writeFasta <- function(data, filename) {
  fastaLines <- c()
  for (rowNum in 1:nrow(data)) {
    fastaLines <- c(fastaLines, as.character(paste(">", data[rowNum, "header"], sep = "")))
    fastaLines <- c(fastaLines, as.character(data[rowNum, "sequences"]))
  }
  fileConn <- file(filename)
  writeLines(fastaLines, fileConn)
  close(fileConn)
}

writeFasta(NS_yamalnd, "~/Desktop/Msc/flub_results/aligned_total/yam/NS_yamedited.fa")
```


